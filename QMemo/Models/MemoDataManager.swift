//
//  MemoEntityManager.swift
//  QMemo
//
//  Created by Î∞ïÏÑ†Î¶∞ on 5/21/25.
//

import Foundation
import CoreData
import UIKit

class MemoDataManager {

    static let shared = MemoDataManager()
    private let context: NSManagedObjectContext

    private init() {
        // Ïï± Îç∏Î¶¨Í≤åÏù¥Ìä∏ÏóêÏÑú context Í∞ÄÏ†∏Ïò§Í∏∞
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        context = appDelegate.persistentContainer.viewContext
    }

    // üì• Î©îÎ™® Ï∂îÍ∞Ä
    func addMemo(uuid: UUID, title: String, content: String, isFavorite: Bool, alertTime: Date? = nil, latitude: Double? = nil, longitude: Double? = nil) {
        let newMemo = MemoEntity(context: context)
        newMemo.id = uuid
        newMemo.title = title
        newMemo.content = content
        newMemo.isFavorite = isFavorite
        newMemo.createdAt = Date()
        newMemo.alertTime = alertTime

        if let lat = latitude { newMemo.latitude = lat }
        if let lon = longitude { newMemo.longitude = lon }

        saveContext()
    }

    // üì§ Î©îÎ™® Ï†ÑÎ∂Ä Í∞ÄÏ†∏Ïò§Í∏∞
    func fetchMemos() -> [MemoEntity] {
        let request: NSFetchRequest<MemoEntity> = MemoEntity.fetchRequest()

        // ‚≠êÔ∏è Ï¶êÍ≤®Ï∞æÍ∏∞ Î®ºÏ†Ä Ï†ïÎ†¨ (trueÍ∞Ä ÏúÑÎ°ú Ïò§Í≤å = ÎÇ¥Î¶ºÏ∞®Ïàú), Îã§ÏùåÏùÄ ÏÉùÏÑ±Ïùº Í∏∞Ï§Ä
//        let favoriteSort = NSSortDescriptor(key: "isFavorite", ascending: false)
        let dateSort = NSSortDescriptor(key: "createdAt", ascending: false)

        request.sortDescriptors = [ dateSort] //favoriteSort,

        do {
            return try context.fetch(request)
        } catch {
            print("‚ùå Î©îÎ™® Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: \(error)")
            return []
        }
    }

    // üóë Î©îÎ™® ÌïúÍ∞ú ÏÇ≠Ï†ú
    func deleteMemo(_ memo: MemoEntity) {
        context.delete(memo)
        saveContext()
    }
    
    // üóë Î©îÎ™® Îã§Ïàò ÏÇ≠Ï†ú
    func deleteMemos(_ memos: [MemoEntity]) {
        for memo in memos {
            context.delete(memo)
        }
        saveContext()
    }

    // ‚úèÔ∏è Î©îÎ™® ÏàòÏ†ï (title, content Î≥ÄÍ≤Ω ÏòàÏãú)
    func updateMemo(_ memo: MemoEntity, title: String, content: String, isFavorite: Bool, alertTime: Date? = nil, latitude: Double? = nil, longitude: Double? = nil) {
        memo.title = title
        memo.content = content
        memo.isFavorite = isFavorite 
        memo.alertTime = alertTime  // ÎçÆÏñ¥Ïì∞Í∏∞ ÌóàÏö©
        memo.latitude = latitude ?? 0
        memo.longitude = longitude ?? 0
        saveContext()
    }

    // üíæ Ï†ÄÏû•
    private func saveContext() {
        do {
            try context.save()
        } catch {
            print("‚ùå Ï†ÄÏû• Ïã§Ìå®: \(error)")
        }
    }
    
    // Î©îÎ™®Î•º ÏïÑÏù¥ÎîîÎ°ú Í≤ÄÏÉâÌïòÏó¨ Í∞ÄÏ†∏Ïò¥
    func fetchMemo(byID id: UUID) -> MemoEntity? {
        let request: NSFetchRequest<MemoEntity> = MemoEntity.fetchRequest()
        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)
        request.fetchLimit = 1
        do {
            return try context.fetch(request).first
        } catch {
            print("‚ùå ÌäπÏ†ï Î©îÎ™® Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: \(error)")
            return nil
        }
    }
    
    func alarmJoinfetchMemo(by id: UUID) -> MemoEntity? {
        let fetchRequest: NSFetchRequest<MemoEntity> = MemoEntity.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "id == %@", id as CVarArg)
        fetchRequest.fetchLimit = 1
        
        do {
            return try context.fetch(fetchRequest).first
        } catch {
            print("‚ùå Î©îÎ™® Ï∞æÍ∏∞ Ïã§Ìå®: \(error)")
            return nil
        }
    }
}
